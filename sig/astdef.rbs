class Expression
end

class BinExp < Expression
  @op: String
  @left: Expression
  @right: Expression

  def initialize: (String op, Expression left, Expression right) -> void
end

class Int < Expression
  @value: Integer

  def initialize: (Integer value) -> void
end

class Var < Expression
  @v: String

  def initialize: (String v) -> void
end

class Call < Expression
  @fun: String
  @args: Array[Expression]

  def initialize: (String fun, Array[Expression] args) -> void
end

class Statement
end

class If < Statement
  @e: Expression
  @s1: Statement
  @s2: Statement

  def initialize: (Expression e, Statement s1, Statement s2) -> void
end

class While < Statement
  @e: Expression
  @s: Statement

  def initialize: (Expression e, Statement s) -> void
end

class Assign < Statement
  @v: String
  @e: Expression

  def initialize: (String v, Expression e) -> void
end

class Sequence < Statement
  @ss: Array[Statement]

  def initialize: (Array[Statement] ss) -> void
end

class FuncDef < Statement
  @params: Array[String]
  @body: Statement

  def initialize: (Array[String] params, Statement body) -> void
end